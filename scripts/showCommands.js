'use strict';

// Just some housekeeping stuff for commands and keymaps

const commands = require('../lib/kodiCommands');
const var_dump = require('var_dump');

// This is a complete list of valid input actions for the v9 API.
var all_actions = [
/*  These have direct API methods
  "left",
  "right",
  "up",
  "down",
  "select",
  "back",
  "info",
  "osd",
  "codecinfo",
  "playerprocessinfo",
*/
  "pageup",
  "pagedown",
  "highlight",
  "parentdir",
  "parentfolder",
  "menu",
  "previousmenu",
  "pause",
  "stop",
  "skipnext",
  "skipprevious",
  "fullscreen",
  "aspectratio",
  "stepforward",
  "stepback",
  "bigstepforward",
  "bigstepback",
  "chapterorbigstepforward",
  "chapterorbigstepback",
  "showsubtitles",
  "nextsubtitle",
  "cyclesubtitle",
  "playerdebug",
  "nextpicture",
  "previouspicture",
  "zoomout",
  "zoomin",
  "playlist",
  "queue",
  "zoomnormal",
  "zoomlevel1",
  "zoomlevel2",
  "zoomlevel3",
  "zoomlevel4",
  "zoomlevel5",
  "zoomlevel6",
  "zoomlevel7",
  "zoomlevel8",
  "zoomlevel9",
  "nextcalibration",
  "resetcalibration",
  "analogmove",
  "analogmovex",
  "analogmovey",
  "rotate",
  "rotateccw",
  "close",
  "subtitledelayminus",
  "subtitledelay",
  "subtitledelayplus",
  "audiodelayminus",
  "audiodelay",
  "audiodelayplus",
  "subtitleshiftup",
  "subtitleshiftdown",
  "subtitlealign",
  "audionextlanguage",
  "verticalshiftup",
  "verticalshiftdown",
  "nextresolution",
  "audiotoggledigital",
  "number0",
  "number1",
  "number2",
  "number3",
  "number4",
  "number5",
  "number6",
  "number7",
  "number8",
  "number9",
  "smallstepback",
  "fastforward",
  "rewind",
  "play",
  "playpause",
  "switchplayer",
  "delete",
  "copy",
  "move",
  "screenshot",
  "rename",
  "togglewatched",
  "scanitem",
  "reloadkeymaps",
  "volumeup",
  "volumedown",
  "mute",
  "backspace",
  "scrollup",
  "scrolldown",
  "analogfastforward",
  "analogrewind",
  "moveitemup",
  "moveitemdown",
  "contextmenu",
  "shift",
  "symbols",
  "cursorleft",
  "cursorright",
  "showtime",
  "analogseekforward",
  "analogseekback",
  "showpreset",
  "nextpreset",
  "previouspreset",
  "lockpreset",
  "randompreset",
  "increasevisrating",
  "decreasevisrating",
  "showvideomenu",
  "enter",
  "increaserating",
  "decreaserating",
  "setrating",
  "togglefullscreen",
  "nextscene",
  "previousscene",
  "nextletter",
  "prevletter",
  "jumpsms2",
  "jumpsms3",
  "jumpsms4",
  "jumpsms5",
  "jumpsms6",
  "jumpsms7",
  "jumpsms8",
  "jumpsms9",
  "filter",
  "filterclear",
  "filtersms2",
  "filtersms3",
  "filtersms4",
  "filtersms5",
  "filtersms6",
  "filtersms7",
  "filtersms8",
  "filtersms9",
  "firstpage",
  "lastpage",
  "guiprofile",
  "red",
  "green",
  "yellow",
  "blue",
  "increasepar",
  "decreasepar",
  "volampup",
  "volampdown",
  "volumeamplification",
  "createbookmark",
  "createepisodebookmark",
  "settingsreset",
  "settingslevelchange",
  "stereomode",
  "nextstereomode",
  "previousstereomode",
  "togglestereomode",
  "stereomodetomono",
  "channelup",
  "channeldown",
  "previouschannelgroup",
  "nextchannelgroup",
  "playpvr",
  "playpvrtv",
  "playpvrradio",
  "record",
  "togglecommskip",
  "showtimerrule",
  "leftclick",
  "rightclick",
  "middleclick",
  "doubleclick",
  "longclick",
  "wheelup",
  "wheeldown",
  "mousedrag",
  "mousemove",
  "tap",
  "longpress",
  "pangesture",
  "zoomgesture",
  "rotategesture",
  "swipeleft",
  "swiperight",
  "swipeup",
  "swipedown",
  "error",
  "noop"
];

	// * https://kodi.wiki/view/JSON-RPC_API/v9#GUI.Window
var api_windows = [
  "home",
  "programs",
  "pictures",
  "filemanager",
  "settings",
  "music",
  "videos",
  "tvchannels",
  "tvrecordings",
  "tvguide",
  "tvtimers",
  "tvsearch",
  "radiochannels",
  "radiorecordings",
  "radioguide",
  "radiotimers",
  "radiosearch",
  "gamecontrollers",
  "pvrguideinfo",
  "pvrrecordinginfo",
  "pvrradiordsinfo",
  "pvrtimersetting",
  "pvrgroupmanager",
  "pvrchannelmanager",
  "pvrguidesearch",
  "pvrchannelscan",
  "pvrupdateprogress",
  "pvrosdchannels",
  "pvrosdguide",
  "pvrosdteletext",
  "systeminfo",
  "testpattern",
  "screencalibration",
  "systemsettings",
  "servicesettings",
  "pvrsettings",
  "playersettings",
  "mediasettings",
  "interfacesettings",
  "appearancesettings",
  "videoplaylist",
  "loginscreen",
  "profiles",
  "skinsettings",
  "addonbrowser",
  "yesnodialog",
  "progressdialog",
  "virtualkeyboard",
  "volumebar",
  "submenu",
  "favourites",
  "contextmenu",
  "notification",
  "numericinput",
  "gamepadinput",
  "shutdownmenu",
  "playercontrols",
  "playerprocessinfo",
  "seekbar",
  "musicosd",
  "addonsettings",
  "visualisationpresetlist",
  "osdcmssettings",
  "osdvideosettings",
  "osdaudiosettings",
  "audiodspmanager",
  "osdaudiodspsettings",
  "videobookmarks",
  "filebrowser",
  "networksetup",
  "mediasource",
  "profilesettings",
  "locksettings",
  "contentsettings",
  "songinformation",
  "smartplaylisteditor",
  "smartplaylistrule",
  "busydialog",
  "pictureinfo",
  "accesspoints",
  "fullscreeninfo",
  "sliderdialog",
  "addoninformation",
  "subtitlesearch",
  "musicplaylist",
  "musicplaylisteditor",
  "teletext",
  "selectdialog",
  "musicinformation",
  "okdialog",
  "movieinformation",
  "textviewer",
  "fullscreenvideo",
  "fullscreenlivetv",
  "fullscreenradio",
  "visualisation",
  "slideshow",
  "weather",
  "screensaver",
  "videoosd",
  "videomenu",
  "videotimeseek",
  "startwindow",
  "startup",
  "peripheralsettings",
  "extendedprogressdialog",
  "mediafilter",
  "addon",
  "eventlog",
  "tvtimerrules",
  "radiotimerrules"
];



/*
 *  Check for unimplemeted actions
 */

var implemented_actions = [];
var unimplemented_actions = [];
var ids = [];

for(const [id, command] of Object.entries(commands.commands)) {
  ids.push(id.toUpperCase());
  if(command.method == 'Input.ExecuteAction') {
    implemented_actions.push(command.params.action);
  }
}

all_actions.forEach(function(item, index, array) {
  if(implemented_actions.includes(item)) {
  } else {
    unimplemented_actions.push(item);
  }
});

if(unimplemented_actions.length > 0) {
  console.log('Unimplemented action IDs:');
  console.log(unimplemented_actions.sort().join(', '));
/*
  unimplemented_actions.sort().forEach((item, index, array) => {
    console.log(item);
  });
*/
}

// ids.sort().forEach(function(item, index, array) {
//   process.stdout.write("'"+item+"', \n");
// });

/*
 *  Check for keymap references
 */


/*
 *  Check for GUI.ActivateWindow coverage
 */
